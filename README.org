* Haskell Type Demo
A quick demo I gave to friends about why the Haskell type system seems
to be objectively better than other type systems.

** Why is it Better?
1. Aesthetically the types make for more descriptive type signatures.
   This is just my personal opinion though.
2. It will catch potential bugs at compile time. This is an objective
   truth.

*** Just wanted to mention
1. This type system is not unique to Haskell (Elm has a similar one
   and there are probably more).
2. This type system isn't even unique to functional programming
   languages so hypothetically a language like Go could have this sort
   of type system. Rust, for example, has an ~Option~ type which is
   similar to Haskell's ~Maybe~ type.

** What we're going to do
We are going to define a function called ~lookup~ in three languages
(C, Go, and Haskell) which looks up a value in a hash table and
returns the value *and* indicates whether or not that value exists
(because it might not!). The keys in this hash table are strings and
the values are integers. Doing this can be tricky in some languages
because essentially you need to return 2 values (the value and whether
or not it exists) but many languages only let you return one value.

This example might feel contrived but the idea of looking up something
which may not exist is not. For example you could be looking up a key
in a redis cache or a specific row in db, etc... So this pattern
definitely comes up a lot in programming and I feel that haskell
handles it very elegantly.

*** C
#+BEGIN_SRC sh
  gcc -Wall -Werror -o main main.c && ./main
#+END_SRC

*** Go
#+BEGIN_SRC sh
  go run main.go
#+END_SRC

*** Haskell
#+BEGIN_SRC sh
  ghc -Wall -Werror main.hs && ./main
#+END_SRC

** "lookup" function comparison
*** C
#+BEGIN_SRC c
  bool lookup(char *key, strToIntMap m, int *value)
#+END_SRC

Another one could have been:
#+BEGIN_SRC c
  int *lookup(char *key, strToIntMap m)
#+END_SRC

**** Criticisms:
- The type signature is confusing.
- The function can be used incorrectly (e.g forgetting to check if the
  value exists before using it).

*** Go
#+BEGIN_SRC go
  lookup(key string, m map[string]int) (int, bool)
#+END_SRC

**** Criticisms:
- The type signature is an improvement over C but the relationship
  between the (int, bool) return values is not enforced by code, the
  programmer must be aware of it.
- The function can be used incorrectly (e.g forgetting to check if the
  value exists before using it).

*** Haskell
#+BEGIN_SRC haskell
  lookup :: String -> [(String, Int)] -> Maybe Int
#+END_SRC

The lookup function we defined is actually generic (cool!) so this
type could be rewritten as:
#+BEGIN_SRC haskell
  lookup :: Eq a => a -> [(a, b)] -> Maybe b
#+END_SRC

**** Benefits
- The type signature is very clear.
- It is not possible to use the function incorrectly and if you forget
  a case then your code won't even compile.
